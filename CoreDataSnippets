//REF : http://iosdose.com/wp/2018/01/13/interview-questions-core-data/

Q]Types of Core Data Concurrency
A] MainQueueConcurrencyType: Specifies that the managed object context will be associated with the main queue.
NSMainQueueConcurrencyType is specifically for use with your application interface 
and can only be used on the main queue of an application.

let mainMOC = NSManagedObjectContext(concurrencyType: .MainQueueConcurrencyType)

NSPrivateQueueConcurrencyType:Specifies that themanaged object context will be associated with a private dispatch queue.
In general, avoid doing data processing on the main queue that is not user-related. 
Data processing can be CPU-intensive, and if it is performed on the main queue, it can result in unresponsiveness in the UI.
If your application will be processing data, such as importing data into Core Data from JSON, 
create a private queue context and perform the import on the private context.

let privateMOC = NSManagedObjectContext(concurrencyType: .PrivateQueueConcurrencyType)


Q] What are NSManagedObjectContext?
A] An object representing a single object space or scratch pad that you use to fetch, create, and save managed objects.
We can access main managed object context as below:

appdelegate.persistentcontainer.viewContext

We can access private managed object context as below:

appdelegate.persistentcontainer.newBackgroundcontext

Q]Creating a managed object context?

1. Creating a main concurrency type context:
let mainMOC = NSManagedObjectContext(concurrencyType: .MainQueueConcurrencyType)

2. Creating a private/background type context:
let privateMOC = NSManagedObjectContext(concurrencyType: .PrivateQueueConcurrencyType)

Accessing main context:
appdelegate.persistentcontainer.viewContext

Accessing background context:
a]  let context = appdelegate.persistentcontainer.newBackgroundTask
    context.automaticallyMergechangesFromParent = true
    //do long running task
 
b] with closure -
    appdelegate.persistentcontainer.performBackgroundTask{ (privatecontext)
    //do long running task
    }
    
Q] How to perform background task in core data?
A]
a] The Closure Way - 
    persistentContainer.performBackgroundTask { (context) in
            
            let howMany = 999
            for index in 1...howMany{
                let person = Person(context: context)
                person.firstName = "First name \(index)"
                person.lastName = "First name \(index)"
            }
            do{
                try context.save()
                DispatchQueue.main.async{completion()}
            } catch {
                // catch the errors here
            }
    }
   
b] New background context way:
   let context = persistentContainer.newBackgroundContext()
   context.automaticallyMergesChangesFromParent = true
        
    //After this, we will write our Person instances into this new background context and then save it.
    //Once that is done, we call the completion handler:
        
        context.perform {
            let howMany = 999
            for index in 1...howMany {
                let person = Person(context: context)
                person.firstName = "First name \(index)"
                person.lastName = "First name \(index)"
            }
            do{
                try context.save()
                DispatchQueue.main.async{completion()}
            } catch {
                // catch the errors here
            }
        }
        
 Q] Can we have multiple MOC? Why would we need it?
 A] Yes, we can have multiple MOC. In scenario where multiple operations are performed simultaneously are performed on Core Data.
 If we are processing some long task to download JSON and convert to Core Data and simultaneously fetching the data at this scenario,
 we can use two different MOC for the operations.
 
 Q] Will you ever pass managedObject from one context to another context?
 A] No, NSManagedObject instances are not intended to be passed between queues. 
 Doing so can result in corruption of the data and termination of the application. 
 When it is necessary to hand off a managed object reference from one queue to another,
 it must be done through NSManagedObjectID instances.
 You retrieve the managed object ID of a managed object by calling the objectID method on the NSManagedObject instance.
 
 let objectID = managedObject.objectID
 
 According to the Core Data concurrency rule, each thread must have its own managed object context. 
 This is because NSManagedObjectContext and NSManagedObject, two most fundamental objects in Core Data, are not thread safe. 
 They shouldnâ€™t be initialized in one thread and accessed from a different thread.


Q] What are different ways of creating private context? How to write code for perform some long running task in background?
a] Closure way :
        persistentContainer.performBackgroundTask { (context) in
            
            let howMany = 999
            for index in 1...howMany{
                let person = Person(context: context)
                person.firstName = "First name \(index)"
                person.lastName = "First name \(index)"
            }
            do{
                try context.save()
                DispatchQueue.main.async{completion()}
            } catch {
                // catch the errors here
            }
        }
        
b] new background context way :
        let context = persistentContainer.newBackgroundContext()
        context.automaticallyMergesChangesFromParent = true
        
        //After this, we will write our Person instances into this new background context and then save it. 
        //Once that is done, we call the completion handler:
        
        context.perform {
            let howMany = 999
            for index in 1...howMany{
                let person = Person(context: context)
                person.firstName = "First name \(index)"
                person.lastName = "First name \(index)"
            }
            do{
                try context.save()
                DispatchQueue.main.async{completion()}
            } catch {
                // catch the errors here
            }
        }
        
Q] What are core data delete rules?

Every relationship has a delete rule. It defines what happens when the record that owns the relationship is deleted.

From Apple:

a] Deny:
If there is at least one object at the relationship destination (employees), do not delete the source object (department).
For example, if you want to remove a department, 
you must ensure that all the employees in that department are first transferred elsewhere. 
Otherwise, the department cannot be deleted.

b] Nullify:
Remove the relationship between the objects, but do not delete either object.
This only makes sense if the department relationship for an employee is optional.
If you ensure that you set a new department for each of the employees before the next save operation.

c] Cascade:
Delete the objects at the destination of the relationship when you delete the source.
For example, if you delete a department, fire all the employees in that department at the same time.

d] No Action:
Do nothing to the object at the destination of the relationship.
For example, if you delete a department, leave all the employees as they are. 
Even if they still believe they belong to that department.
